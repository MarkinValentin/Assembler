#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/mobility-module.h"
#include "ns3/lte-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"

using namespace ns3;

int main (int argc, char *argv[])
{
  // Create nodes
  NodeContainer enbNode;
  enbNode.Create(1);
  
  NodeContainer ueNodes;
  ueNodes.Create(2);

  // Install Mobility model
  MobilityHelper mobility;
  mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
  mobility.Install (enbNode);
  mobility.Install (ueNodes);

  // Create LTE helper
  Ptr<LteHelper> lteHelper = CreateObject<LteHelper> ();

  // Install eNodeB
  NetDeviceContainer enbDevs;
  enbDevs = lteHelper->InstallEnbDevice (enbNode);

  // Install UEs
  NetDeviceContainer ueDevs;
  ueDevs = lteHelper->InstallUeDevice (ueNodes);

  // Attach UEs to eNodeB
  lteHelper->Attach (ueDevs, enbDevs.Get (0));

  // Activate a data radio bearer
  lteHelper->ActivateDataRadioBearer (ueDevs);

  // Configure the scheduler
  lteHelper->SetSchedulerType ("ns3::TdBetScheduler");

  // Configure RLC and MAC layer tracing
  lteHelper->EnableRlcTraces ();
  lteHelper->EnableMacTraces ();

  // Install internet stack on UEs
  InternetStackHelper internet;
  internet.Install (ueNodes);

  // Assign IP addresses to UEs
  Ipv4AddressHelper ipv4;
  ipv4.SetBase ("10.1.1.0", "255.255.255.0");
  ipv4.Assign (ueDevs);

  // Create traffic generator
  UdpClientHelper client (Ipv4Address ("10.1.1.1"), 9);
  client.SetAttribute ("MaxPackets", UintegerValue (UINT32_MAX));
  client.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
  client.SetAttribute ("PacketSize", UintegerValue (1024));

  ApplicationContainer clientApps = client.Install (ueNodes.Get (0));
  clientApps.Start (Seconds (0.0));
  clientApps.Stop (Seconds (10.0));

  // Create echo server
  UdpServerHelper echoServer (9);
  ApplicationContainer serverApps = echoServer.Install (ueNodes.Get (1));
  serverApps.Start (Seconds (0.0));
  serverApps.Stop (Seconds (10.0));

  // Run simulation
  Simulator::Stop (Seconds (10.0));
  Simulator::Run ();
  Simulator::Destroy ();

  return 0;
}
