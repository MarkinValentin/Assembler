#include <iostream>
#include <cmath>
#include <cstdlib>
#include <ctime>

// Функция для генерации белого гауссовского шума с использованием преобразования Бокса-Мюллера
double generateGaussianNoise()
{
    static double z0, z1;
    static bool generate;
    generate = !generate;

    if (!generate)
        return z1;

    double u1, u2, v1, v2, s;
    do
    {
        u1 = rand() / ((double)RAND_MAX);
        u2 = rand() / ((double)RAND_MAX);
        v1 = 2 * u1 - 1;
        v2 = 2 * u2 - 1;
        s = v1 * v1 + v2 * v2;
    } while (s >= 1 || s == 0);

    double multiplier = sqrt(-2 * log(s) / s);
    z0 = v1 * multiplier;
    z1 = v2 * multiplier;

    return z0;
}

// Функция для вычисления среднего значения массива
double mean(double arr[], int size)
{
    double sum = 0;
    for (int i = 0; i < size; ++i)
    {
        sum += arr[i];
    }
    return sum / size;
}

// Функция для вычисления стандартного отклонения массива
double stddev(double arr[], int size)
{
    double m = mean(arr, size);
    double sum_sq_diff = 0;
    for (int i = 0; i < size; ++i)
    {
        sum_sq_diff += (arr[i] - m) * (arr[i] - m);
    }
    return sqrt(sum_sq_diff / size);
}

int main()
{
    // Задаем параметры
    const int numSamples = 10000;

    // Инициализируем генератор случайных чисел
    srand(time(NULL));

    // Генерируем белый гауссовский шум и сохраняем значения в массиве
    double samples[numSamples];
    for (int i = 0; i < numSamples; ++i)
    {
        samples[i] = generateGaussianNoise();
    }

    // Вычисляем среднее значение и стандартное отклонение
    double meanValue = mean(samples, numSamples);
    double stddevValue = stddev(samples, numSamples);

    std::cout << "Mean: " << meanValue << std::endl;
    std::cout << "Standard Deviation: " << stddevValue << std::endl;

    return 0;
}
