#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <semaphore.h>
#include <fcntl.h>
#include <string.h>

int catch_error()
{
    perror("\nError");
    return -1;
}

int main(int argc, char *argv[]) {

    pid_t pid = getpid();
    printf("\n[Child %d] \t New proc \n", pid);
    
    if (strcmp(argv[1], "shm") == 0) {
        int shmID = atoi(argv[2]);
        int shmIDResult = atoi(argv[3]);
        int childIndex = atoi(argv[4]);
        int nChildren = atoi(argv[5]);
        int count = atoi(argv[6]);
        
  

        int *numbers = (int *)shmat(shmID, NULL, SHM_RDONLY);
        long *resultPtr = (long *)shmat(shmIDResult, NULL, 0);
        if (numbers == (void *)-1 || resultPtr == (void *)-1) {
            printf("Error: shmat failed\n");
            catch_error();
        }

        sem_t *sem = sem_open("/semaphore", 0);
        if (sem == SEM_FAILED) {
            printf("Error: sem_open failed\n");
            catch_error();
        }

  
        int segmentSize = count / nChildren;
        int remainder = count % nChildren;
        int startIdx = childIndex * segmentSize + (childIndex < remainder ? childIndex : remainder);
        int endIdx = startIdx + segmentSize + (childIndex < remainder ? 1 : 0);
        
        int countNumber = endIdx - startIdx;

        printf("[Child %d] \t Input length: %d \n", pid, countNumber);
        
         long sum = 0;
        for (int i = startIdx; i < endIdx; i++) {
            sum += (long)numbers[i] * (long)numbers[i];
        }

        sem_wait(sem);
        resultPtr[childIndex] = sum;
        sem_post(sem);

        shmdt(numbers);
        shmdt(resultPtr);
        sem_close(sem);
        printf("[Child %d] \t Result: %d \n", pid, sum);

        sleep(10); // 10-секундная задержка перед завершением
        exit(EXIT_SUCCESS);
    } else if (strcmp(argv[1], "pipe") == 0) {
        long sum = 0;
        int number;
	
        while (read(STDIN_FILENO, &number, sizeof(number)) > 0) {
            sum += (long)number * (long)number;
        }
        write(STDOUT_FILENO, &sum, sizeof(sum)); // Отправляем сумму обратно в родительский процесс

        sleep(10); // 10-секундная задержка перед завершением
        exit(EXIT_SUCCESS);
    }
}
